#title "Expected Directives"
#markdown 1

Your scripts can use directives for your own purposes, but here we're going to talk about the directives that belong to RubyFrontier — the built-in directives that RubyFrontier expects and hopes to find in your source folder.

<%= imageref("structure") %>

As a starting point, we'll use the above screen shot. Not all possible built-in directives are illustrated in that screen shot, though.

* **#autoglossary.yaml**. This file is generated by RubyFrontier. There is only one, at the top level of the source folder. You can throw it away and ask for a new one to be generated, but you should not edit it directly. I'll explain its purpose later.

* **#filters**. If there is a `#filters` folder, RubyFrontier will look inside it for Ruby scripts called `firstFilter.rb`, `pageFilter.rb`, and `finalFilter.rb`. Each script will be called at a particular point when a renderable is processed, as I'll explain later. These scripts are "hooks", allowing you to customize the rendering process. For example, the default new RubyFrontier site uses `pageFilter.rb` to transform a Markdown text page object into HTML (by applying Markdown to it).

* **#ftpSite.yaml**. You *must* have exactly one `#ftpSite.yaml` file, and it *must* be located at the top level of the source folder. This is how RubyFrontier knows where the top level of the source folder is — the mere presence of the file tells RubyFrontier this. The file also contains some important information, which I'll discuss later.

* **#images**. If RubyFrontier encounters an `#images` folder, it will look inside it for images that you ask to display in your Web pages.

* **#javascripts**. If RubyFrontier encounters a `#javascripts` folder