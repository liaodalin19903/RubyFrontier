#title "Outline Renderers"

An outline renderer is a Ruby script that transforms an outline (an `.opml` file, which is a form of XML) into text suitable for use as the content of a Web page. It is usually provided as an `.rb` file in a `#tools` folder; or, if you want an outline renderer to be available to all your Web sites, you can keep it in [the `user.rb` file](user).

An outline renderer script must have the following form:

		module UserLand::Renderers
		  class Myrenderer < SuperRenderer
		    def render(op)
			  # do stuff, return result
		    end
		  end
		end

The name "Myrenderer" should be replaced by whatever you want to call the renderer. This is the name you will use when you specify `:renderoutlinewith` so that RubyFrontier knows to apply this renderer to a particular page. RubyFrontier will call your renderer's `render` method, handing it one parameter, namely the OPML (XML) of `:bodytext`, which is your entire outline page object file stripped of its opening directives.

When your renderer runs, its code is subject to [macro scoping](macroscoping). This will allow you to call back easily into the PageMaker object.

To help you manipulate the outline, RubyFrontier defines a subset of the [Frontier `op` verbs](http://pages.sbcglobal.net/mattneub/frontierDef/ch18.html). (Consult the file `opml.rb`.) The outline, when you receive it in `render`, is already wrapped in an object of class Opml. (This is the parameter called `op` in the above schema.) You are expected to use the Opml methods, which imitate the Frontier `op` verbs, to navigate the outline and extract the desired information. Under this paradigm, there is always a "current line" of the outline to which we are pointing. A brief description follows.

**firstSummit()**. Moves the current line pointer to the earliest, leftmost line of the outline. When the outline arrives at your renderer, `firstSummit()` has already been called. [Frontier users note: no verbs for expanding and collapsing are provided; the outline is completely expanded when it arrives at your renderer]

**level()**. Returns a positive integer stating how deep into the outline the current line is. Top level is `1`. Deprecated (it's rather slow); conventionally, you are expected to keep track of the level yourself as you navigate the outline, if you need this information.

**go(dir, count)**. Attempts to reposition the current line pointer. `dir` specifies a direction to try to move, and can be one of the following: `:up`, `:down`, `:right`, `:left`, `:flatup`, `:flatdown`. (`:flatup` and `:flatdown` navigate without regard to the hierarchy structure of the outline.) `count` is how many steps in the given direct to try to take; it is optional, the default being `1`. The current line pointer will be moved as many steps as possible given the structure of the outline, up to the value of `count`. The result is `true` if the current line pointer was moved at all, `false` if it could not be moved even one step in the given direction.

**getLineText()**. Returns the contents of the current line, as a string.

**setLineText(s)**. Sets the contents of the current line to the string `s`.

**countSubs()**. Returns the number of immediate children of the current line.

**hasSubs()**. Returns a boolean reporting whether the current line has any children. 

**insert(s, dir)**. Creates, adjacent to the current line, a new line whose contents are the string `s`, and points to it. `dir` specifies the location of the new line, and can be `:down` or `:right`. (This is not a full implementation of the Frontier verb, but so far it's all I've needed.)

**deleteLine()**. Deletes the current line. The line subsequently pointed to as the current line is sensible and correct for proper outline behavior: the previous sibling if there is one, otherwise the subsequent sibling if there is one, otherwise the parent (and if there is no parent, this must be the only line of the outline, so what is deleted is its text, as the outline must always have at least one line).

**inspect(io)**. (Not a Frontier verb.) Returns `getLineText()` for every line of the outline, indenting with spaces to show hierarchical depth, and feeds each string to `io`, which should be something that understands the `<<` operator. If `io` is omitted, returns a string. Useful for debugging.

**inspect_flat()**. (Not a Frontier verb.) Returns `getLineText()` for every line of the outline, as a string. Implemented to be fast; therefore, useful for obtaining the final result if your renderer works by manipulating the outline's contents in place.

> NOTE: These are all the Frontier `op.` verbs I have implemented because they are the only ones my renderers need. Others can be implemented in future if needed.

> ANOTHER NOTE: Opml is designed to be implemented either using the built-in Ruby library `REXML` or the Ruby gem `libxml`. To set which of the two is used, edit the value of the boolean constant `USELIBXML` in `opml.rb`. I find that `libxml` is a bit faster, but it has some memory bugs on my machine (though these do not prevent Opml from working properly). Since `libxml` may not be present on your machine, you will have to [install it](http://libxml.rubyforge.org/install.xml) if you want to use it.